{"version":3,"sources":["questionFrame/questionFrame.module.css","result/result.module.css","App.module.css","questionFrame/questionFrame.js","result/result.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","questionFrame","props","className","styleQuestion","item","question","currentQuestion","pointer","onClick","checkAnswer","button","answerA","answerB","answerC","answerD","result","styleResult","Math","round","percentResult","point","score","click","restart","bind","copiedQuestions","map","index","resultItem","answerUser","answer","answerFrame","style","marginRight","green","textAlign","red","marginTop","App","state","BaseQuestions","id","currentQuestions","visibleQuiz","visibleResult","checkInTime","console","log","startGame","newArray","randomQuestion","floor","random","length","undefined","find","push","j","array","filter","setState","respond","createRandomQuestion","newArrray","e","clicked","target","innerHTML","buffor","questionObject","bufforScore","questions","buttonStyle","CSSClass","StartButton","this","disabledVision","join","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wGACAA,EAAOC,QAAU,CAAC,KAAO,4BAA4B,cAAgB,qCAAqC,SAAW,gCAAgC,OAAS,8BAA8B,QAAU,iC,gBCAtMD,EAAOC,QAAU,CAAC,KAAO,qBAAqB,IAAM,oBAAoB,MAAQ,sBAAsB,WAAa,2BAA2B,YAAc,8B,gBCA5JD,EAAOC,QAAU,CAAC,IAAM,iBAAiB,YAAc,yBAAyB,eAAiB,8B,kNCkBlFC,EAfO,SAACC,GAEnB,OACI,yBAAKC,UAAWC,IAAcC,MAC9B,yBAAKF,UAAWC,IAAcH,eAC7B,wBAAIE,UAAWC,IAAcE,UAAWJ,EAAMK,gBAAgBD,WAE/D,iCAAM,0BAAMH,UAAWC,IAAcI,SAA/B,KAAgD,4BAAQC,QAASP,EAAMQ,YAAaP,UAAWC,IAAcO,QAAST,EAAMK,gBAAgBK,UAClJ,iCAAM,0BAAMT,UAAWC,IAAcI,SAA/B,KAAgD,4BAAQC,QAASP,EAAMQ,YAAaP,UAAWC,IAAcO,QAAST,EAAMK,gBAAgBM,UAClJ,iCAAM,0BAAMV,UAAWC,IAAcI,SAA/B,KAAgD,4BAAQC,QAASP,EAAMQ,YAAaP,UAAWC,IAAcO,QAAST,EAAMK,gBAAgBO,UAClJ,iCAAM,0BAAMX,UAAWC,IAAcI,SAA/B,KAAgD,4BAAQC,QAASP,EAAMQ,YAAaP,UAAWC,IAAcO,QAAST,EAAMK,gBAAgBQ,Y,gBCiF3IC,EAnCA,SAACd,GAKZ,OACI,yBAAKC,UAAWc,IAAYZ,MAC5B,kDAAa,gCAASa,KAAKC,MAAMjB,EAAMkB,eAA1B,YAAb,MA5DU,KADGC,EA6D0EnB,EAAMoB,OA3DxFD,EAAQ,SAEE,IAAVA,EACAA,EAAQ,UAGRA,EAAQ,cAqDb,OAAyGnB,EAAMqB,MAA/G,KACA,4BAASd,QAASP,EAAMsB,QAAQC,KAAK,YAArC,WACA,4BAAShB,QAASP,EAAMsB,QAAQC,KAAK,SAArC,uBACA,4BAAI,gDAEF,6BACKvB,EAAMwB,gBAAgBC,KAAI,SAACtB,EAAKuB,GACnC,OACE,yBAAKzB,UAAWc,IAAYY,YAGzB,8CAAoBD,EAAM,GAC1B,6BAAMvB,EAAKC,WA7DJwB,EA8DOzB,EAAKyB,WA9DDC,EA8DY1B,EAAK0B,OA5D3CD,IAAeC,EAGhB,yBAAK5B,UAAWc,IAAYe,aAC5B,uBAAGC,MAAO,CAACC,YAAY,SAAvB,2BAEA,uBAAG/B,UAAWc,IAAYkB,OAAQL,IAQhC,yBAAKG,MAAO,CAACG,UAAU,SACtB,yBAAKjC,UAAWc,IAAYe,aAC7B,uBAAGC,MAAO,CAACC,YAAY,SAAvB,2BACA,uBAAG/B,UAAWc,IAAYoB,KAAMP,IAG/B,yBAAK3B,UAAWc,IAAYe,aAC5B,uBAAIC,MAAO,CAACC,YAAY,OAAOI,UAAU,MAAzC,aACA,uBAAGL,MAAO,CAACK,UAAU,KAAMnC,UAAWc,IAAYkB,OAAQJ,OAxB9C,IAACD,EAAWC,OAZf,IAACV,GC0LNkB,E,4MA1LbC,MAAQ,CACNC,cAAe,CACb,CACEC,GAAI,EAAGpC,SAAU,sGAAgFM,QAAS,iBAAkBC,QAAS,yBACrIC,QAAS,qBAAsBC,QAAS,4BAAwBgB,OAAQ,4BAAuBD,WAAW,MAE5G,CACEY,GAAI,EAAGpC,SAAU,mCAA+BM,QAAS,mBAAUC,QAAS,cAC5EC,QAAS,cAAeC,QAAS,eAAWgB,OAAQ,mBAASD,WAAW,MAE1E,CACEY,GAAI,EAAGpC,SAAU,wHAAkGM,QAAS,WAAYC,QAAS,SACjJC,QAAS,UAAWC,QAAS,YAAagB,OAAQ,WAAWD,WAAW,MAE1E,CACEY,GAAI,EAAGpC,SAAU,6DAA+CM,QAAS,UAAWC,QAAS,WAC7FC,QAAS,SAAUC,QAAS,cAAUgB,OAAQ,SAASD,WAAW,MAEpE,CACEY,GAAI,EAAGpC,SAAU,mDAA4CM,QAAS,QAASC,QAAS,YACxFC,QAAS,SAAUC,QAAS,SAAUgB,OAAQ,QAAQD,WAAW,OAGrEa,iBAAiB,KACjBpC,gBAAiB,KAEjBmB,gBAAiB,GAEjBkB,aAAa,EACbC,eAAe,EAEfvB,MAAO,EACPC,MAAO,G,EAITuB,YAAc,WACZC,QAAQC,IAAI,mBAAmB,EAAKR,MAAMG,kBAC1CI,QAAQC,IAAI,kBAAkB,EAAKR,MAAMjC,iBACzCwC,QAAQC,IAAI,cAAc,EAAKR,MAAMI,aACrCG,QAAQC,IAAI,kBAAkB,EAAKR,MAAMd,kB,EAM3CuB,UAAY,WASV,IAJC,IAAMN,EAAgB,YAAO,EAAKH,MAAMC,eAGnCS,EAAW,GAPnB,cAUI,IAAIC,EAAiBR,EAAiBzB,KAAKkC,MAAMlC,KAAKmC,SAAWV,EAAiBW,cAEpEC,IADDL,EAASM,MAAK,SAACnD,GAAD,OAASA,IAAS8C,KAG3CD,EAASO,KAAKN,GAIdO,IAlBN,KAQUA,EAAI,EAAEA,EAAE,EAAEA,IACjB,EADOA,GAcR,IAAMP,EAAiBD,EAAShC,KAAKkC,MAAMlC,KAAKmC,SAAWH,EAASI,SAC9DK,EAAQT,EAASU,QAAO,SAACvD,GAAD,OAAUA,IAAS8C,KAlB7B,GAmBTM,KAAKN,GAChB,EAAKU,SAAS,CAAEtD,gBAAiB4C,EAAgBR,iBAAkBgB,EAAMf,aAAY,K,EAOvFpB,QAAU,SAACsC,GAGM,YAAZA,GAED,EAAKD,SAAS,CAAClB,iBAAmB,KAAKpC,gBAAgB,KAAKe,MAAO,EAAEC,MAAO,EAAEsB,eAAc,EAAMnB,gBAAgB,KAClH,EAAKuB,aAIL,EAAKY,SAAS,CAAClB,iBAAmB,KAAKpC,gBAAgB,KAAKe,MAAO,EAAEC,MAAO,EAAEsB,eAAc,EAAMnB,gBAAgB,M,EAKtHqC,qBAAuB,WAGrB,IAAMC,EAAS,YAAO,EAAKxB,MAAMG,kBACjC,GAAyB,IAArBqB,EAAUV,OAAc,CAC1B,IAAMH,EAAiB,EAAKX,MAAMG,iBAAiBzB,KAAKkC,MAAMlC,KAAKmC,SAAW,EAAKb,MAAMG,iBAAiBW,SACpGK,EAAQK,EAAUJ,QAAO,SAACvD,GAAD,OAAUA,IAAS8C,KAClD,EAAKU,SAAS,CAAEtD,gBAAiB4C,EAAgBR,iBAAkBgB,SAInE,EAAKE,SAAS,CAAEjB,aAAa,EAAMC,eAAc,K,EAIrDnC,YAAc,SAACuD,GACb,IAAIC,EAAU,EAAK1B,MAAMjB,MAGzB2C,IACA,IAAMnC,EAAS,EAAKS,MAAMjC,gBAAgBwB,OAC1CgB,QAAQC,IAAIiB,EAAEE,OAAOC,WACrB,IAAMC,EAAS,EAAK7B,MAAMd,gBACtB4C,EAAiB,EAAK9B,MAAMjC,gBAIhC,GAHA+D,EAAexC,WAAamC,EAAEE,OAAOC,UACrCC,EAAOZ,KAAKa,GAERL,EAAEE,OAAOC,YAAcrC,EAAQ,CACjC,IAAIwC,EAAc,EAAK/B,MAAMlB,MAC7BiD,IACA,EAAKV,SAAS,CAAEvC,MAAOiD,EAAahD,MAAO2C,EAAQxC,gBAAgB2C,IACnE,EAAKN,4BAGL,EAAKF,SAAS,CAAEtC,MAAO2C,EAAQxC,gBAAgB2C,IAC/C,EAAKN,wB,uDAMP,IAAIS,EAAY,KACZxD,EAAS,KACTyD,EAAc,GAclB,GAbAA,EAAYhB,KAAKiB,IAASC,cAGK,IAA3BC,KAAKpC,MAAMI,aAEX4B,EAAY,kBAAC,EAAD,CAAejE,gBAAiBqE,KAAKpC,MAAMjC,gBAAiBG,YAAekE,KAAKlE,cAC5F+D,EAAYhB,KAAKiB,IAASG,iBAI7BL,EAAY,MAGmB,IAA7BI,KAAKpC,MAAMK,cACd,CAGE,IAAMzB,EAAiBwD,KAAKpC,MAAMlB,MAAQsD,KAAKpC,MAAMjB,MAAS,IAC9DkD,EAAYhB,KAAKiB,IAASG,gBAC5B7D,EACI,kBAAC,EAAD,CAAQI,cAAeA,EACfE,MAAOsD,KAAKpC,MAAMlB,MAClBC,MAAOqD,KAAKpC,MAAMjB,MAClBC,QAASoD,KAAKpD,QACdE,gBAAiBkD,KAAKpC,MAAMd,iBAJpC,UASFV,EAAS,KAKX,OACE,yBAAKb,UAAWuE,IAASnC,KACvB,yCACA,4BAAQpC,UAAWsE,EAAYK,KAAK,KAAMrE,QAASmE,KAAK3B,WAAxD,eAECuB,EACAxD,O,GAnLS+D,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlD,QAAQkD,MAAMA,EAAMC,c","file":"static/js/main.49d7e8b7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"questionFrame_item__16qMj\",\"questionFrame\":\"questionFrame_questionFrame__1DX5J\",\"question\":\"questionFrame_question__3QlGr\",\"button\":\"questionFrame_button__1FjSn\",\"pointer\":\"questionFrame_pointer__1qe6b\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"result_item__1qQT8\",\"red\":\"result_red__3Rjle\",\"green\":\"result_green__2TmZG\",\"resultItem\":\"result_resultItem__3d7ay\",\"answerFrame\":\"result_answerFrame__24hfj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__1Y-CB\",\"StartButton\":\"App_StartButton__1Ffk6\",\"disabledVision\":\"App_disabledVision__3NZjY\"};","import React from 'react';\r\nimport styleQuestion from './questionFrame.module.css';\r\n\r\n\r\nconst questionFrame = (props) =>\r\n{\r\n    return (\r\n        <div className={styleQuestion.item}>\r\n        <div className={styleQuestion.questionFrame}>\r\n         <h3 className={styleQuestion.question}>{props.currentQuestion.question}</h3>\r\n        </div>\r\n        <div> <span className={styleQuestion.pointer}>A</span><button onClick={props.checkAnswer} className={styleQuestion.button}>{props.currentQuestion.answerA}</button></div>\r\n        <div> <span className={styleQuestion.pointer}>B</span><button onClick={props.checkAnswer} className={styleQuestion.button}>{props.currentQuestion.answerB}</button></div>\r\n        <div> <span className={styleQuestion.pointer}>C</span><button onClick={props.checkAnswer} className={styleQuestion.button}>{props.currentQuestion.answerC}</button></div>\r\n        <div> <span className={styleQuestion.pointer}>D</span><button onClick={props.checkAnswer} className={styleQuestion.button}>{props.currentQuestion.answerD}</button></div>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default questionFrame;","import React from 'react';\r\n\r\nimport styleResult from './result.module.css';\r\nimport styleApp from '../App.module.css';\r\n\r\n\r\nconst nameOfPoint = (point) => {\r\n    if (point === 1) {\r\n      return point + \" punkt\";\r\n    }\r\n    else if (point === 2) {\r\n      return point + \" punkty\";\r\n    }\r\n    else {\r\n      return point + \" punktów\";\r\n    }\r\n  }\r\n\r\n  const renderAnswer = (answerUser,answer) =>\r\n  {\r\n      if(answerUser === answer)\r\n      {\r\n      return (\r\n        <div className={styleResult.answerFrame}>\r\n        <p style={{marginRight:'10px'}}>  Twoja odpowiedź:</p>\r\n      \r\n        <p className={styleResult.green}>{answerUser}</p>\r\n        </div>\r\n      );\r\n       \r\n      }\r\n      else\r\n      {\r\n        return (\r\n          <div style={{textAlign:'left'}}>\r\n           <div className={styleResult.answerFrame}>\r\n          <p style={{marginRight:'10px'}}>  Twoja odpowiedź:</p>\r\n          <p className={styleResult.red}>{answerUser}</p>\r\n\r\n          </div>\r\n           <div className={styleResult.answerFrame}>\r\n           <p  style={{marginRight:'10px',marginTop:'0'}}>poprawna:</p>\r\n           <p style={{marginTop:'0'}} className={styleResult.green}>{answer}</p>\r\n \r\n           </div>\r\n          </div>\r\n         \r\n\r\n\r\n\r\n         \r\n       \r\n        );\r\n\r\n      }\r\n  }\r\n\r\n  \r\n\r\n\r\nconst result = (props) =>\r\n{\r\n\r\n \r\n    \r\n    return (\r\n        <div className={styleResult.item}>\r\n        <p>wykonałeś <strong>{Math.round(props.percentResult)} % testu</strong>  ({nameOfPoint(props.score)} na {props.click})</p>\r\n        <button  onClick={props.restart.bind('restart')}>Od nowa</button>\r\n        <button  onClick={props.restart.bind('menu')}>Menu główne</button>\r\n        <h2><strong>odpowiedzi:</strong></h2>\r\n    \r\n        { <div>\r\n              {props.copiedQuestions.map((item,index) => {\r\n            return (\r\n              <div className={styleResult.resultItem}>\r\n\r\n               \r\n                 <h3> Pytanie numer {index+1}</h3>\r\n                 <div>{item.question}</div>\r\n                 {renderAnswer(item.answerUser,item.answer)}\r\n                \r\n              </div>       \r\n           \r\n            );\r\n            \r\n        \r\n            })}</div> }\r\n       \r\n        \r\n       \r\n      </div>\r\n    );\r\n}\r\n\r\nexport default result;\r\n\r\n","import React, { Component } from 'react';\r\nimport CSSClass from './App.module.css';\r\nimport QuestionFrame from './questionFrame/questionFrame.js';\r\nimport Result from './result/result.js';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    BaseQuestions: [\r\n      {\r\n        id: 1, question: \"Jak nazywa się słynny jarmark, który odbywa się w Gdańsku od ponad 750 lat ?\", answerA: 'Jarmark Europa', answerB: 'Jarmark Poznański',\r\n        answerC: 'Jarmark Warszawski', answerD: 'Jarmark Dominikański', answer: 'Jarmark Dominikański',answerUser:null\r\n      },\r\n      {\r\n        id: 2, question: 'Co znaczy słowo \"biblion\" ?', answerA: 'księgę', answerB: 'bibuła',\r\n        answerC: 'bibilioteka', answerD: 'krzesło', answer: 'księgę',answerUser:null\r\n      },\r\n      {\r\n        id: 3, question: \"Posiadał czapkę która czyniła go niewidzialnym , był rzadkim bywalcem olimpu , o kogo chodzi ?\", answerA: 'o Hadesa', answerB: 'Pateon',\r\n        answerC: 'o zeusa', answerD: 'o hermesa', answer: 'o Hadesa',answerUser:null\r\n      },\r\n      {\r\n        id: 4, question: \"Pośrednik, stręczyciel nierządu to inaczej:\", answerA: 'mastema', answerB: 'krzysiek',\r\n        answerC: 'rajfur', answerD: 'błazen', answer: 'rajfur',answerUser:null\r\n      },\r\n      {\r\n        id: 5, question: '\"Gorąca 20 \" to lista przebojów radia : ', answerA: ' Eska', answerB: 'radio zet',\r\n        answerC: 'trojka', answerD: 'rm fmm', answer: ' Eska',answerUser:null\r\n      },\r\n    ],\r\n    currentQuestions:null,\r\n    currentQuestion: null,\r\n\r\n    copiedQuestions: [],\r\n\r\n    visibleQuiz: false,\r\n    visibleResult: false,\r\n\r\n    score: 0,\r\n    click: 0,\r\n    \r\n  };\r\n\r\n  checkInTime = () => {\r\n    console.log(\"currentQuestions\",this.state.currentQuestions);\r\n    console.log(\"currentQuestion\",this.state.currentQuestion);\r\n    console.log(\"visibleQuiz\",this.state.visibleQuiz);\r\n    console.log(\"copiedQuestions\",this.state.copiedQuestions);\r\n  }\r\n\r\n \r\n\r\n\r\n  startGame = () =>\r\n  {\r\n\r\n    \r\n\r\n     const currentQuestions = [...this.state.BaseQuestions];\r\n     const emptyArray = [];\r\n   \r\n    const newArray = [];\r\n    for(let j = 0;j<3;j++)\r\n    {\r\n      let randomQuestion = currentQuestions[Math.floor(Math.random() * currentQuestions.length)];\r\n      let finded = newArray.find((item)=> item === randomQuestion);\r\n      if(finded === undefined)\r\n      {\r\n        newArray.push(randomQuestion);\r\n      }\r\n      else\r\n      {\r\n        j--;\r\n      }\r\n    }\r\n\r\n    const randomQuestion = newArray[Math.floor(Math.random() * newArray.length)];\r\n    const array = newArray.filter((item) => item !== randomQuestion);\r\n    emptyArray.push(randomQuestion);\r\n    this.setState({ currentQuestion: randomQuestion, currentQuestions: array,visibleQuiz:true});\r\n\r\n    \r\n      \r\n      \r\n    \r\n  }\r\n  restart = (respond) =>\r\n  {\r\n    \r\n    if(respond === 'restart')\r\n    {\r\n      this.setState({currentQuestions : null,currentQuestion:null,score: 0,click: 0,visibleResult:false,copiedQuestions:[]});\r\n      this.startGame();\r\n    }\r\n    else\r\n    {\r\n      this.setState({currentQuestions : null,currentQuestion:null,score: 0,click: 0,visibleResult:false,copiedQuestions:[]});\r\n    }\r\n     \r\n  }\r\n  \r\n  createRandomQuestion = () => {\r\n \r\n    \r\n    const newArrray = [...this.state.currentQuestions];\r\n    if (newArrray.length !== 0) {\r\n      const randomQuestion = this.state.currentQuestions[Math.floor(Math.random() * this.state.currentQuestions.length)];\r\n      const array = newArrray.filter((item) => item !== randomQuestion);\r\n      this.setState({ currentQuestion: randomQuestion, currentQuestions: array});\r\n    }\r\n    else {\r\n      \r\n      this.setState({ visibleQuiz: false,visibleResult:true });\r\n    }\r\n\r\n  }\r\n  checkAnswer = (e) => {\r\n    let clicked = this.state.click;\r\n     \r\n    \r\n    clicked++;\r\n    const answer = this.state.currentQuestion.answer;\r\n    console.log(e.target.innerHTML);\r\n    const buffor = this.state.copiedQuestions;\r\n    let questionObject = this.state.currentQuestion;\r\n    questionObject.answerUser = e.target.innerHTML; \r\n    buffor.push(questionObject);\r\n\r\n    if (e.target.innerHTML === answer) {\r\n      let bufforScore = this.state.score;\r\n      bufforScore++\r\n      this.setState({ score: bufforScore, click: clicked,copiedQuestions:buffor });\r\n      this.createRandomQuestion();\r\n    }\r\n    else {\r\n      this.setState({ click: clicked,copiedQuestions:buffor });\r\n      this.createRandomQuestion();\r\n    }\r\n  }\r\n\r\n  \r\n  render() {\r\n    let questions = null;\r\n    let result = null;\r\n    let buttonStyle = [];\r\n    buttonStyle.push(CSSClass.StartButton);\r\n\r\n\r\n    if (this.state.visibleQuiz === true) {\r\n     \r\n        questions = <QuestionFrame currentQuestion={this.state.currentQuestion} checkAnswer = {this.checkAnswer}></QuestionFrame>;\r\n        buttonStyle.push(CSSClass.disabledVision);\r\n    }\r\n    else {\r\n\r\n     questions = null;\r\n    }\r\n\r\n    if(this.state.visibleResult === true)\r\n    {\r\n\r\n      \r\n      const percentResult = (this.state.score / this.state.click) * 100;\r\n      buttonStyle.push(CSSClass.disabledVision);\r\n    result = (\r\n        <Result percentResult={percentResult} \r\n                score={this.state.score} \r\n                click={this.state.click}\r\n                restart={this.restart}\r\n                copiedQuestions={this.state.copiedQuestions}> </Result>\r\n      );\r\n    }\r\n    else\r\n    {\r\n      result = null;\r\n    }\r\n\r\n    \r\n \r\n    return (\r\n      <div className={CSSClass.App}>\r\n        <h1>QUIZ Game</h1>\r\n        <button className={buttonStyle.join(' ')} onClick={this.startGame}>zacznij gre</button>\r\n        {/* <button onClick={this.checkInTime}>consoleLog</button> */}\r\n        {questions}\r\n        {result}\r\n       \r\n\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}