{"version":3,"sources":["App.module.css","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","state","questions","id","question","answerA","answerB","answerC","answerD","answer","copiedQuestions","currentQuestion","visibleQuiz","score","click","checkInTime","console","log","nameOfPoint","point","startGame","setState","createRandomQuestion","restart","newArrray","length","randomQuestion","Math","floor","random","array","filter","item","checkAnswer","e","clicked","target","innerHTML","bufforScore","buttonStyle","push","CSSClass","StartButton","this","className","onClick","button","disabledVision","percentResult","round","join","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7d1db3f7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__3wvRq\",\"item\":\"App_item__IAnW0\",\"button\":\"App_button__YfRUt\",\"StartButton\":\"App_StartButton__BVItW\",\"disabledVision\":\"App_disabledVision__2MLhl\"};","import React, { Component } from 'react';\nimport CSSClass from './App.module.css';\nclass App extends Component {\n  state = {\n    questions: [\n      {\n        id: 1, question: \"Co Ania lubi najbardziej wieczorem?\", answerA: 'owocki', answerB: 'lody',\n        answerC: 'buszindo', answerD: 'wszystkie powyżej', answer: 'wszystkie powyżej'\n      },\n      {\n        id: 2, question: 'Dlaczego Anna to ,,Owocowy oszust\"?', answerA: 'bo kradnie owoce', answerB: 'bo oszukuje na wadze w sklepie',\n        answerC: 'zalała mixer do szejków', answerD: 'bo je dużo owoców', answer: 'zalała mixer do szejków'\n      },\n      {\n        id: 3, question: \"Na czym chciała zjechać Anna ze szczytu góry podczas wycieczki na morskie Oko? \", answerA: 'na nartach', answerB: 'na plecaku',\n        answerC: 'na koniu', answerD: 'gopr ją zniósł', answer: 'na plecaku',\n      },\n      {\n        id: 4, question: \"Jak nazywa się wioska startowa Anny? \", answerA: 'gaboń', answerB: 'nowy sącz',\n        answerC: 'jaworzno', answerD: 'st hellens', answer: 'jaworzno',\n      },\n      {\n        id: 5, question: \"wymień zdanie najczęściej powtarzane przez Anne \", answerA: 'misiuuuś zawieziesz mnie do pracy?', answerB: 'misiuuuś pozmywasz naczynia?',\n        answerC: 'misiuuuś zrobisz carbonare?', answerD: 'misiuuuś mamy coś słodkiego? (na wieczór)', answer: 'misiuuuś mamy coś słodkiego? (na wieczór)',\n      },\n    ],\n    copiedQuestions: null,\n    currentQuestion: null,\n    visibleQuiz: false,\n    score: 0,\n    click: 0,\n    \n  };\n\n  checkInTime = () => {\n    console.log(this.state.questions);\n  }\n\n  nameOfPoint = (point) => {\n    if (point === 1) {\n      return point + \" punkt\";\n    }\n    else if (point === 2) {\n      return point + \" punkty\";\n    }\n    else {\n      return point + \" punktów\";\n    }\n  }\n\n\n  startGame = () =>\n  {\n      this.setState({visibleQuiz: true,copiedQuestions:this.state.questions});\n      this.createRandomQuestion();\n  }\n\n  restart = () =>\n  {\n      this.setState({questions : this.state.copiedQuestions,score: 0,click: 0});\n  }\n  createRandomQuestion = () => {\n \n    const newArrray = [...this.state.questions];\n    if (newArrray.length !== 0) {\n      const randomQuestion = this.state.questions[Math.floor(Math.random() * this.state.questions.length)];\n      const array = newArrray.filter((item) => item !== randomQuestion);\n      this.setState({ currentQuestion: randomQuestion, questions: array});\n    }\n    else {\n      console.log('pusto');\n      this.setState({ visibleQuiz: false, questions: null });\n    }\n\n  }\n  checkAnswer = (e) => {\n    let clicked = this.state.click;\n    clicked++;\n    const answer = this.state.currentQuestion.answer;\n    if (e.target.innerHTML === answer) {\n      let bufforScore = this.state.score;\n      bufforScore++\n      this.setState({ score: bufforScore, click: clicked });\n      this.createRandomQuestion();\n    }\n    else {\n      this.setState({ click: clicked });\n      this.createRandomQuestion();\n    }\n  }\n  render() {\n    let question = null;\n    let buttonStyle = [];\n    buttonStyle.push(CSSClass.StartButton);\n    if (this.state.questions !== null) {\n      if (this.state.visibleQuiz === true) {\n        question = (\n          <div className={CSSClass.item}>\n            <p>{this.state.currentQuestion.question}</p>\n            <div> A)<button onClick={this.checkAnswer} className={CSSClass.button}>{this.state.currentQuestion.answerA}</button></div>\n            <div> A)<button onClick={this.checkAnswer} className={CSSClass.button}>{this.state.currentQuestion.answerB}</button></div>\n            <div> A)<button onClick={this.checkAnswer} className={CSSClass.button}>{this.state.currentQuestion.answerC}</button></div>\n            <div> A)<button onClick={this.checkAnswer} className={CSSClass.button}>{this.state.currentQuestion.answerD}</button></div>\n          </div>\n        );\n        buttonStyle.push(CSSClass.disabledVision);\n      }\n    }\n    else {\n\n      const percentResult = (this.state.score / this.state.click) * 100;\n      buttonStyle.push(CSSClass.disabledVision);\n      question = (\n        <div className={CSSClass.item}>\n          <p>wykonałeś {Math.round(percentResult)} % testu ({this.nameOfPoint(this.state.score)} na {this.state.click})</p>\n          <button onClick={this.restart}>Od nowa</button>\n        </div>\n      );\n    }\n \n    return (\n      <div className={CSSClass.App}>\n        <h1>Mietus Game v1.0</h1>\n        <button className={buttonStyle.join(' ')} onClick={this.startGame}>zacznij gre</button>\n        {/* <button onClick={this.checkInTime}>consoleLog</button> */}\n        {question}\n\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}