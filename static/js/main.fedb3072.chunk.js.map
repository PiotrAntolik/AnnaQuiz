{"version":3,"sources":["App.module.css","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","state","questions","id","question","answerA","answerB","answerC","answerD","answer","copiedQuestions","currentQuestion","visibleQuiz","score","click","checkInTime","console","log","nameOfPoint","point","startGame","setState","createRandomQuestion","restart","newArrray","length","randomQuestion","Math","floor","random","array","filter","item","checkAnswer","e","clicked","target","innerHTML","bufforScore","buttonStyle","push","CSSClass","StartButton","this","className","questionFrame","onClick","button","disabledVision","percentResult","round","join","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yGACAA,EAAOC,QAAU,CAAC,IAAM,iBAAiB,KAAO,kBAAkB,OAAS,oBAAoB,YAAc,yBAAyB,eAAiB,4BAA4B,SAAW,sBAAsB,cAAgB,6B,2JCsIrNC,E,4MApIbC,MAAQ,CACNC,UAAW,CACT,CACEC,GAAI,EAAGC,SAAU,sGAAgFC,QAAS,iBAAkBC,QAAS,yBACrIC,QAAS,qBAAsBC,QAAS,4BAAwBC,OAAQ,6BAE1E,CACEN,GAAI,EAAGC,SAAU,mCAA+BC,QAAS,mBAAUC,QAAS,cAC5EC,QAAS,cAAeC,QAAS,eAAWC,OAAQ,oBAEtD,CACEN,GAAI,EAAGC,SAAU,wHAAkGC,QAAS,WAAYC,QAAS,SACjJC,QAAS,UAAWC,QAAS,YAAaC,OAAQ,YAEpD,CACEN,GAAI,EAAGC,SAAU,6DAA+CC,QAAS,UAAWC,QAAS,WAC7FC,QAAS,SAAUC,QAAS,cAAUC,OAAQ,UAEhD,CACEN,GAAI,EAAGC,SAAU,mDAA4CC,QAAS,QAASC,QAAS,YACxFC,QAAS,SAAUC,QAAS,SAAUC,OAAQ,UAGlDC,gBAAiB,KACjBC,gBAAiB,KACjBC,aAAa,EACbC,MAAO,EACPC,MAAO,G,EAITC,YAAc,WACZC,QAAQC,IAAI,EAAKhB,MAAMC,Y,EAGzBgB,YAAc,SAACC,GACb,OAAc,IAAVA,EACKA,EAAQ,SAEE,IAAVA,EACAA,EAAQ,UAGRA,EAAQ,e,EAKnBC,UAAY,WAER,EAAKC,SAAS,CAACT,aAAa,EAAKF,gBAAgB,EAAKT,MAAMC,YAC5D,EAAKoB,wB,EAGTC,QAAU,WAEN,EAAKF,SAAS,CAACnB,UAAY,EAAKD,MAAMS,gBAAgBG,MAAO,EAAEC,MAAO,K,EAE1EQ,qBAAuB,WAErB,IAAME,EAAS,YAAO,EAAKvB,MAAMC,WACjC,GAAyB,IAArBsB,EAAUC,OAAc,CAC1B,IAAMC,EAAiB,EAAKzB,MAAMC,UAAUyB,KAAKC,MAAMD,KAAKE,SAAW,EAAK5B,MAAMC,UAAUuB,SACtFK,EAAQN,EAAUO,QAAO,SAACC,GAAD,OAAUA,IAASN,KAClD,EAAKL,SAAS,CAAEV,gBAAiBe,EAAgBxB,UAAW4B,SAG5Dd,QAAQC,IAAI,SACZ,EAAKI,SAAS,CAAET,aAAa,EAAOV,UAAW,Q,EAInD+B,YAAc,SAACC,GACb,IAAIC,EAAU,EAAKlC,MAAMa,MACzBqB,IACA,IAAM1B,EAAS,EAAKR,MAAMU,gBAAgBF,OAC1C,GAAIyB,EAAEE,OAAOC,YAAc5B,EAAQ,CACjC,IAAI6B,EAAc,EAAKrC,MAAMY,MAC7ByB,IACA,EAAKjB,SAAS,CAAER,MAAOyB,EAAaxB,MAAOqB,IAC3C,EAAKb,4BAGL,EAAKD,SAAS,CAAEP,MAAOqB,IACvB,EAAKb,wB,uDAIP,IAAIlB,EAAW,KACXmC,EAAc,GAElB,GADAA,EAAYC,KAAKC,IAASC,aACG,OAAzBC,KAAK1C,MAAMC,WACkB,IAA3ByC,KAAK1C,MAAMW,cACbR,EACE,yBAAKwC,UAAWH,IAAST,MACvB,yBAAKY,UAAWH,IAASI,eACxB,wBAAID,UAAWH,IAASrC,UAAWuC,KAAK1C,MAAMU,gBAAgBP,WAE/D,mCAAQ,4BAAQ0C,QAASH,KAAKV,YAAaW,UAAWH,IAASM,QAASJ,KAAK1C,MAAMU,gBAAgBN,UACnG,mCAAQ,4BAAQyC,QAASH,KAAKV,YAAaW,UAAWH,IAASM,QAASJ,KAAK1C,MAAMU,gBAAgBL,UACnG,mCAAQ,4BAAQwC,QAASH,KAAKV,YAAaW,UAAWH,IAASM,QAASJ,KAAK1C,MAAMU,gBAAgBJ,UACnG,mCAAQ,4BAAQuC,QAASH,KAAKV,YAAaW,UAAWH,IAASM,QAASJ,KAAK1C,MAAMU,gBAAgBH,WAGvG+B,EAAYC,KAAKC,IAASO,qBAGzB,CAEH,IAAMC,EAAiBN,KAAK1C,MAAMY,MAAQ8B,KAAK1C,MAAMa,MAAS,IAC9DyB,EAAYC,KAAKC,IAASO,gBAC1B5C,EACE,yBAAKwC,UAAWH,IAAST,MACvB,kDAAcL,KAAKuB,MAAMD,GAAzB,aAAmDN,KAAKzB,YAAYyB,KAAK1C,MAAMY,OAA/E,OAA2F8B,KAAK1C,MAAMa,MAAtG,KACA,4BAAQgC,QAASH,KAAKpB,SAAtB,YAKN,OACE,yBAAKqB,UAAWH,IAASzC,KACvB,yCAGA,4BAAQ4C,UAAWL,EAAYY,KAAK,KAAML,QAASH,KAAKvB,WAAxD,eAEChB,O,GA/HSgD,aCUEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtD,QAAQsD,MAAMA,EAAMC,a","file":"static/js/main.fedb3072.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__1Eet-\",\"item\":\"App_item__2hmr3\",\"button\":\"App_button__36evY\",\"StartButton\":\"App_StartButton__1E0p3\",\"disabledVision\":\"App_disabledVision__1u2Wr\",\"question\":\"App_question__2Ysqe\",\"questionFrame\":\"App_questionFrame__jXVDw\"};","import React, { Component } from 'react';\r\nimport CSSClass from './App.module.css';\r\nclass App extends Component {\r\n  state = {\r\n    questions: [\r\n      {\r\n        id: 1, question: \"Jak nazywa się słynny jarmark, który odbywa się w Gdańsku od ponad 750 lat ?\", answerA: 'Jarmark Europa', answerB: 'Jarmark Poznański',\r\n        answerC: 'Jarmark Warszawski', answerD: 'Jarmark Dominikański', answer: 'Jarmark Dominikański'\r\n      },\r\n      {\r\n        id: 2, question: 'Co znaczy słowo \"biblion\" ?', answerA: 'księgę', answerB: 'bibuła',\r\n        answerC: 'bibilioteka', answerD: 'krzesło', answer: 'księgę'\r\n      },\r\n      {\r\n        id: 3, question: \"Posiadał czapkę która czyniła go niewidzialnym , był rzadkim bywalcem olimpu , o kogo chodzi ?\", answerA: 'o Hadesa', answerB: 'Pateon',\r\n        answerC: 'o zeusa', answerD: 'o hermesa', answer: 'o Hadesa',\r\n      },\r\n      {\r\n        id: 4, question: \"Pośrednik, stręczyciel nierządu to inaczej:\", answerA: 'mastema', answerB: 'krzysiek',\r\n        answerC: 'rajfur', answerD: 'błazen', answer: 'rajfur',\r\n      },\r\n      {\r\n        id: 5, question: '\"Gorąca 20 \" to lista przebojów radia : ', answerA: ' Eska', answerB: 'radio zet',\r\n        answerC: 'trojka', answerD: 'rm fmm', answer: ' Eska',\r\n      },\r\n    ],\r\n    copiedQuestions: null,\r\n    currentQuestion: null,\r\n    visibleQuiz: false,\r\n    score: 0,\r\n    click: 0,\r\n    \r\n  };\r\n\r\n  checkInTime = () => {\r\n    console.log(this.state.questions);\r\n  }\r\n\r\n  nameOfPoint = (point) => {\r\n    if (point === 1) {\r\n      return point + \" punkt\";\r\n    }\r\n    else if (point === 2) {\r\n      return point + \" punkty\";\r\n    }\r\n    else {\r\n      return point + \" punktów\";\r\n    }\r\n  }\r\n\r\n\r\n  startGame = () =>\r\n  {\r\n      this.setState({visibleQuiz: true,copiedQuestions:this.state.questions});\r\n      this.createRandomQuestion();\r\n  }\r\n\r\n  restart = () =>\r\n  {\r\n      this.setState({questions : this.state.copiedQuestions,score: 0,click: 0});\r\n  }\r\n  createRandomQuestion = () => {\r\n \r\n    const newArrray = [...this.state.questions];\r\n    if (newArrray.length !== 0) {\r\n      const randomQuestion = this.state.questions[Math.floor(Math.random() * this.state.questions.length)];\r\n      const array = newArrray.filter((item) => item !== randomQuestion);\r\n      this.setState({ currentQuestion: randomQuestion, questions: array});\r\n    }\r\n    else {\r\n      console.log('pusto');\r\n      this.setState({ visibleQuiz: false, questions: null });\r\n    }\r\n\r\n  }\r\n  checkAnswer = (e) => {\r\n    let clicked = this.state.click;\r\n    clicked++;\r\n    const answer = this.state.currentQuestion.answer;\r\n    if (e.target.innerHTML === answer) {\r\n      let bufforScore = this.state.score;\r\n      bufforScore++\r\n      this.setState({ score: bufforScore, click: clicked });\r\n      this.createRandomQuestion();\r\n    }\r\n    else {\r\n      this.setState({ click: clicked });\r\n      this.createRandomQuestion();\r\n    }\r\n  }\r\n  render() {\r\n    let question = null;\r\n    let buttonStyle = [];\r\n    buttonStyle.push(CSSClass.StartButton);\r\n    if (this.state.questions !== null) {\r\n      if (this.state.visibleQuiz === true) {\r\n        question = (\r\n          <div className={CSSClass.item}>\r\n            <div className={CSSClass.questionFrame}>\r\n             <h3 className={CSSClass.question}>{this.state.currentQuestion.question}</h3>\r\n            </div>\r\n            <div> A)<button onClick={this.checkAnswer} className={CSSClass.button}>{this.state.currentQuestion.answerA}</button></div>\r\n            <div> B)<button onClick={this.checkAnswer} className={CSSClass.button}>{this.state.currentQuestion.answerB}</button></div>\r\n            <div> C)<button onClick={this.checkAnswer} className={CSSClass.button}>{this.state.currentQuestion.answerC}</button></div>\r\n            <div> D)<button onClick={this.checkAnswer} className={CSSClass.button}>{this.state.currentQuestion.answerD}</button></div>\r\n          </div>\r\n        );\r\n        buttonStyle.push(CSSClass.disabledVision);\r\n      }\r\n    }\r\n    else {\r\n\r\n      const percentResult = (this.state.score / this.state.click) * 100;\r\n      buttonStyle.push(CSSClass.disabledVision);\r\n      question = (\r\n        <div className={CSSClass.item}>\r\n          <p>wykonałeś {Math.round(percentResult)} % testu ({this.nameOfPoint(this.state.score)} na {this.state.click})</p>\r\n          <button onClick={this.restart}>Od nowa</button>\r\n        </div>\r\n      );\r\n    }\r\n \r\n    return (\r\n      <div className={CSSClass.App}>\r\n        <h1>QUIZ Game\r\n\r\n        </h1>\r\n        <button className={buttonStyle.join(' ')} onClick={this.startGame}>zacznij gre</button>\r\n        {/* <button onClick={this.checkInTime}>consoleLog</button> */}\r\n        {question}\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}